
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    public static int findIndexOfElement(int[] arr, int element){
        for( int i=0; i< arr.length; i++){
            if(arr[i] == element){
                return i;
            }
        }
        return -1;
    }

    public static int swapOperation(int[] arr, int fromIndex, int[] sortedArray, int toIndex){
        int temporaryElement = arr[toIndex];
        arr[toIndex] = arr[fromIndex];
        arr[fromIndex] = temporaryElement;
        if (Arrays.equals(arr,sortedArray)){
            return 0;
        }
        return -1;
    }

    public static int reverseOperation(int[] arr, int fromIndex, int[] sortedArray, int toIndex)    {
         Stack<Integer> stack = new Stack<Integer>();
         //int temporaryElement = 0;
         for(int i=fromIndex; i<=toIndex;i++)
         {
             stack.push(arr[i]);
         }
         for(int i=fromIndex; i<=toIndex;i++)
         {
             arr[i] = stack.pop();
         }
        if (Arrays.equals(arr,sortedArray)){
            return 0;
        }
        return -1;
    }

    // Complete the almostSorted function below.
    static void almostSorted(int[] arr) {
        int sortedArray[] = new int[arr.length];
        int originalArray[] = new int[arr.length];
        int unequalElementIndex = 0;
        int unequalElement = 0;
        int returnedIndex = 0;
        int successAfterSwap = 0;
        System.arraycopy(arr,0,sortedArray,0,arr.length);
        System.arraycopy(arr,0,originalArray,0,arr.length);
        Arrays.sort(sortedArray);
        if (Arrays.equals(arr,sortedArray)){
            // If the array is already sorted, output yes on the first line
            System.out.println("yes");
        }
        else{
            for (int i=0; i<arr.length; i++)
            {
                if(arr[i] == sortedArray[i]){
                    continue;
                }
                else{
                    unequalElementIndex = i;
                    break;
                }
            }
            unequalElement = arr[unequalElementIndex];
            returnedIndex = findIndexOfElement(sortedArray,unequalElement);
            successAfterSwap = swapOperation(arr,unequalElementIndex,sortedArray,returnedIndex);
            if(successAfterSwap == 0){
                /* If solving using one operation - swap, output yes on the first line
                *  output swap fromIndex toIndex on second line
                */
                unequalElementIndex++;
                returnedIndex++;
                System.out.println("yes");
                System.out.println("swap " + unequalElementIndex + " " + returnedIndex );
            }
            else
            {
                int successAfterReverse = 0;
                // Check if this can be solved by reversing sub-segment
                successAfterReverse = reverseOperation(originalArray,unequalElementIndex,sortedArray,returnedIndex);
                if(successAfterReverse == 0){
                /* If solving using one operation - reverse, output yes on first line
                *  output reverse fromIndex toIndex on second line
                */
                    unequalElementIndex++;
                    returnedIndex++;
                    System.out.println("yes");
                    System.out.println("reverse " +unequalElementIndex + " " + returnedIndex );
                }
                else{
                    System.out.println("no");
                }
            }
        }
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }

        almostSorted(arr);

        scanner.close();
    }
}
